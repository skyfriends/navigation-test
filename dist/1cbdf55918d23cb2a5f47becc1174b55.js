// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

require = (function (modules, cache, entry) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof require === "function" && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof require === "function" && require;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      function localRequire(x) {
        return newRequire(localRequire.resolve(x));
      }

      localRequire.resolve = function (x) {
        return modules[name][1][x] || x;
      };

      var module = cache[name] = new newRequire.Module;
      modules[name][0].call(module.exports, localRequire, module, module.exports);
    }

    return cache[name].exports;
  }

  function Module() {
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  // Override the current require with this new one
  return newRequire;
})({12:[function(require,module,exports) {

// WARNING: DO NOT EDIT THIS FILE.
// This file is automatically generated by the Zoom Indexer application
// and will be updated each time you re-index your site. You should make all
// setting changes directly from the Indexer, via the Configuration window.
// 
// If you wish to modify the text messages such as "Search results for...",
// etc. then look up "Zoom Language Files" or "Translating the search page"
// in the Users Guide for information.

var UseUTF8 = 0;
var Charset = "windows-1252";
var Codepage = 1252;
var UseStemming = 0;
var NoCharset = 0;
var MapAccents = 0;
var MinWordLen = 2;
var Highlighting = 1;
var GotoHighlight = 0;
var PdfHighlight = 0;
var FormFormat = 2;
var Logging = 0;
var LogFileName = "./logs/searchwords.log";
var MaxKeyWordLineLen = 0;
var OutputBasewordBufferSize = 0;
var OutputVariantBufferSize = 0;
var DictIDLen = 4;
var UseBigPageInfoData = 0;
var NumKeywords = 3312;
var NumVariants = 759;
var NumPages = 45;
var DictArrayCount = 0;
var PageInfoArrayCount = 0;
var PageDataArrayCount = 0;
var PageInfoSize = 0;
var MaxMatches = 1000;
var MaxContextSeeks = 500;
var MaxSearchTime = 30;
var MaxResultsPerQuery = 1000;
var DictReservedLimit = 165;
var DictReservedSpaces = 42;
var DictReservedSuffixes = 83;
var DictReservedPrefixes = 124;
var DictReservedNoSpaces = 165;
var PluginOpenNewWindow = 0;
var FileTypePluginStart = 4;
var WordSplit = 1;
var ZoomInfo = 1;
var Timing = 0;
var DefaultToAnd = 0;
var SearchAsSubstring = 0;
var ToLowerSearchWords = 1;
var StripDiacritics = 0;
var ContextSize = 30;
var MaxContextKeywords = 3;
var WeightProximity = 0;
var AllowExactPhrase = 0;
var UseLinkTarget = 0;
var UseDateTime = 0;
var DateRangeSearch = 0;
var UseDomainDiversity = 1;
var DefaultSort = 0;
var DateRangeFormat = 0;
var DotNetUseFormTags = 0;
var DotNetUsePostBacks = 1;
var UseZoomImage = 0;
var WordJoinChars = ".-_'";
var Spelling = 0;
var Recommended = 0;
var NumRecommended = 0;
var RecommendedMax = 0;
var UseCats = 0;
var UseMetaFields = 0;
var NumMetaFields = 0;
var DisplayMetaFields = 0;
var TruncateShowURL = 0;
var DisplayNumber = 1;
var DisplayTitle = 1;
var DisplayMetaDesc = 1;
var DisplayContext = 0;
var DisplayTerms = 1;
var DisplayScore = 1;
var DisplayURL = 1;
var DisplayDate = 1;
var DisplayFilesize = 0;
var StartPtFailed = 0;
var Version = "Version 7.1 (1016) PRO";

},{}],0:[function(require,module,exports) {
var global = (1, eval)('this');
var OldModule = module.bundle.Module;
function Module() {
  OldModule.call(this);
  this.hot = {
    accept: function (fn) {
      this._acceptCallback = fn || function () {};
    },
    dispose: function (fn) {
      this._disposeCallback = fn;
    }
  };
}

module.bundle.Module = Module;

if (!module.bundle.parent) {
  var ws = new WebSocket('ws://localhost:56308/');
  ws.onmessage = function(event) {
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      data.assets.forEach(function (asset) {
        hmrApply(global.require, asset);
      });

      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          hmrAccept(global.require, asset.id);
        }
      });
    }

    if (data.type === 'reload') {
      ws.close();
      ws.onclose = () => {
        window.location.reload();
      }
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] âœ¨ Error resolved');
    }

    if (data.type === 'error') {
      console.error('[parcel] ðŸš¨  ' + data.error.message + '\n' + 'data.error.stack');
    }
  };
}

function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {
        parents.push(+k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAccept(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAccept(bundle.parent, id);
  }

  var cached = bundle.cache[id];
  if (cached && cached.hot._disposeCallback) {
    cached.hot._disposeCallback();
  }

  delete bundle.cache[id];
  bundle(id);

  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallback) {
    cached.hot._acceptCallback();
    return true;
  }

  return getParents(global.require, id).some(function (id) {
    return hmrAccept(global.require, id)
  });
}
},{}]},{},[0,12])